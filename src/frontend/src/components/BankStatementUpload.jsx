import { useState, useCallback } from 'react'
import { useDropzone } from 'react-dropzone'
import { MdUpload, MdDescription, MdTrendingUp, MdAttachMoney, MdDateRange } from 'react-icons/md'

const BankStatementUpload = ({ onAnalyticsData, onClose }) => {
  const [uploadedStatement, setUploadedStatement] = useState(null)
  const [isProcessing, setIsProcessing] = useState(false)
  const [analysisResult, setAnalysisResult] = useState(null)

  const onDrop = useCallback(async (acceptedFiles) => {
    if (acceptedFiles.length === 0) return

    const file = acceptedFiles[0]
    setIsProcessing(true)

    const formData = new FormData()
    formData.append('statement', file)

    try {
      const response = await fetch('/api/analyze-statement', {
        method: 'POST',
        body: formData
      })

      const result = await response.json()

      setUploadedStatement({
        file,
        uploadedAt: new Date()
      })

      setAnalysisResult(result)

      // –ü–µ—Ä–µ–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
      if (onAnalyticsData) {
        onAnalyticsData(result)
      }

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–ø–∏—Å–∫–∏:', error)
    } finally {
      setIsProcessing(false)
    }
  }, [onAnalyticsData])

  const { getRootProps, getInputProps, isDragActive } = useDropzone({
    onDrop,
    accept: {
      'application/pdf': ['.pdf'],
      'text/csv': ['.csv'],
      'application/vnd.ms-excel': ['.xls'],
      'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet': ['.xlsx']
    },
    multiple: false
  })

  const resetUpload = () => {
    setUploadedStatement(null)
    setAnalysisResult(null)
  }

  return (
      <div className="bank-statement-upload">
        <button onClick={onClose} className="close-button">
          √ó
        </button>
        <div className="upload-header">
          <h2>üè¶ –ê–Ω–∞–ª–∏–∑ –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –≤—ã–ø–∏—Å–∫–∏</h2>
          <p>–ó–∞–≥—Ä—É–∑–∏—Ç–µ –≤—ã–ø–∏—Å–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞</p>
        </div>

        {!uploadedStatement ? (
            <div
                {...getRootProps()}
                className={`statement-dropzone ${isDragActive ? 'active' : ''} ${isProcessing ? 'processing' : ''}`}
            >
              <input {...getInputProps()} />
              <div className="dropzone-content">
                <MdDescription size={64} color="#2D9A86" />
                {isDragActive ? (
                    <p>–û—Ç–ø—É—Å—Ç–∏—Ç–µ –≤—ã–ø–∏—Å–∫—É –∑–¥–µ—Å—å...</p>
                ) : isProcessing ? (
                    <>
                      <p>–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–ø–∏—Å–∫—É...</p>
                      <div className="processing-spinner"></div>
                    </>
                ) : (
                    <>
                      <p>–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –±–∞–Ω–∫–æ–≤—Å–∫—É—é –≤—ã–ø–∏—Å–∫—É —Å—é–¥–∞</p>
                      <p className="dropzone-hint">
                        –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: PDF, CSV, Excel —Ñ–∞–π–ª—ã
                      </p>
                    </>
                )}
              </div>
            </div>
        ) : (
            <div className="statement-analysis">
              <div className="statement-header">
                <div className="file-info">
                  <MdDescription size={24} color="#2D9A86" />
                  <div>
                    <h3>{uploadedStatement.file.name}</h3>
                    <p>–ó–∞–≥—Ä—É–∂–µ–Ω–æ: {uploadedStatement.uploadedAt.toLocaleString()}</p>
                  </div>
                </div>
                <button onClick={resetUpload} className="reset-button">
                  –ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—É—é –≤—ã–ø–∏—Å–∫—É
                </button>
                <button className="zaman-button">
                  –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
                </button>
              </div>

              {analysisResult && (
                  <div className="analysis-results">
                    <div className="summary-cards">
                      <div className="summary-card">
                        <div className="card-icon">
                          <MdAttachMoney size={24} color="#2D9A86" />
                        </div>
                        <div className="card-content">
                          <h4>–û–±—â–∏–π –±–∞–ª–∞–Ω—Å</h4>
                          <p className="card-value">
                            {analysisResult.totalBalance?.toLocaleString()} ‚ÇΩ
                          </p>
                        </div>
                      </div>

                      <div className="summary-card">
                        <div className="card-icon">
                          <MdTrendingUp size={24} color="#EEFE6D" />
                        </div>
                        <div className="card-content">
                          <h4>–î–æ—Ö–æ–¥—ã –∑–∞ –ø–µ—Ä–∏–æ–¥</h4>
                          <p className="card-value">
                            {analysisResult.totalIncome?.toLocaleString()} ‚ÇΩ
                          </p>
                        </div>
                      </div>

                      <div className="summary-card">
                        <div className="card-icon">
                          <MdTrendingUp size={24} color="#ff6b6b" />
                        </div>
                        <div className="card-content">
                          <h4>–†–∞—Å—Ö–æ–¥—ã –∑–∞ –ø–µ—Ä–∏–æ–¥</h4>
                          <p className="card-value">
                            {analysisResult.totalExpenses?.toLocaleString()} ‚ÇΩ
                          </p>
                        </div>
                      </div>

                      <div className="summary-card">
                        <div className="card-icon">
                          <MdDateRange size={24} color="#2D9A86" />
                        </div>
                        <div className="card-content">
                          <h4>–ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞</h4>
                          <p className="card-value">
                            {analysisResult.period}
                          </p>
                        </div>
                      </div>
                    </div>

                    <div className="insights-section">
                      <h3>üí° –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –∏–Ω—Å–∞–π—Ç—ã</h3>
                      <div className="insights-list">
                        {analysisResult.insights?.map((insight, index) => (
                            <div key={index} className="insight-item">
                              <div className="insight-icon">
                                {insight.type === 'positive' ? '‚úÖ' :
                                    insight.type === 'warning' ? '‚ö†Ô∏è' : 'üí°'}
                              </div>
                              <div className="insight-content">
                                <h4>{insight.title}</h4>
                                <p>{insight.description}</p>
                              </div>
                            </div>
                        ))}
                      </div>
                    </div>

                    <div className="recommendations-section">
                      <h3>üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</h3>
                      <div className="recommendations-list">
                        {analysisResult.recommendations?.map((rec, index) => (
                            <div key={index} className="recommendation-item">
                              <div className="rec-icon">üí°</div>
                              <div className="rec-content">
                                <h4>{rec.title}</h4>
                                <p>{rec.description}</p>
                                {rec.impact && (
                                    <span className="rec-impact">
                            –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è —ç–∫–æ–Ω–æ–º–∏—è: {rec.impact}
                          </span>
                                )}
                              </div>
                            </div>
                        ))}
                      </div>
                    </div>
                  </div>
              )}
            </div>
        )}
      </div>
  )
}

export default BankStatementUpload